<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.ResortReviewsMapper">

	<resultMap id="reviewResultMap" type="reviews.dto.ResortReviewsDTO">
		<result property="reviewId" column="review_id"></result>
		<result property="paymentId" column="payment_id"></result>
	    <result property="uuid" column="uuid"/>
	    <result property="resortId" column="resort_id"></result>
	    <result property="rating" column="rating"/>
	    <result property="resortComment" column="resort_comment"/>
	    <result property="reviewImg" column="review_img"/>
	    <result property="createdAt" column="created_at"/>
	</resultMap>
  
  <!-- 리조트 리뷰 insert -->
  <insert id="insert" parameterType="reviews.dto.ResortReviewsDTO">
    insert into resort_reviews values(reviewid.nextval,#{paymentId},#{uuid},#{resortId},#{rating},#{resortComment},#{reviewImg},sysdate)
  </insert>
  
  <!-- 리조트 리뷰 글 전체 갯수 -->
  <!-- 리조트 별 리뷰 글 전체 갯수 -->
  <!-- select nvl(count(review_id),0) cnt from resort_reviews where resort_id = #{resortId} -->
  <select id="getCount" resultType="int">
  	select nvl(count(review_id),0) cnt from resort_reviews
  </select>
  
    
  <!-- 리뷰 기본 리스트 -->
  <!-- 리조트 별 리뷰 기본 리스트 -->
  <!-- 
  	select review_id, uuid, created_at, rating, resort_comment, review_img
  	from resort_reviews
  	where resort_id = #{resortId}
  	order by
  	<choose>
  		<when test="sortType == 'ratingDesc'">rating DESC</when>
  		<when test="sortType == 'ratingAsc'">rating ASC</when>
  		<otherwise>review_id DESC</otherwise>
  	</choose>
   -->
  <select id="reviewList" parameterType="string" resultMap="reviewResultMap">
  	select review_id, uuid, created_at, rating, resort_comment, review_img 
  	from resort_reviews
  	order by 
  	<choose>
  		<when test="sortType == 'ratingDesc'">rating DESC</when>
  		<when test="sortType == 'ratingAsc'">rating ASC</when>
  		<otherwise>review_id DESC</otherwise>
  	</choose>
  </select>   
  
  <!-- 리조트 리뷰 리스트(정렬 및 페이징) -->
  <!-- 리조트 별 리뷰 리스트 (정렬 및 페이징) -->
  <!-- 
  	select * from (
		select row_number() over(
			order by
			<choose>
				<when test="sortType == 'ratingDesc'">rating DESC</when>
				<when test="sortType == 'ratingAsc'">rating ASC</when>
				<otherwise>review_id DESC</otherwise>
			</choose>
			) as rn, 
			review_id, uuid created_at, rating, resort_comment, review_img
		from resort_reviews where resort_id = #{resortId}
	)sub
	where rn between #{startRow} and {endRow};
  	
   -->
  <select id="reviewArray" parameterType="map" resultMap="reviewResultMap">
	    SELECT review_id, uuid, created_at, rating, resort_comment, review_img FROM (
        	SELECT ROW_NUMBER() OVER (
                ORDER BY 
                <choose>
                    <when test="sortType == 'ratingDesc'">rating DESC</when>
                    <when test="sortType == 'ratingAsc'">rating ASC</when>
                    <otherwise>review_id DESC</otherwise>
                </choose>
            ) AS rn,
            review_id, uuid, created_at, rating, resort_comment, review_img
        FROM resort_reviews
    ) sub
    WHERE rn BETWEEN #{startRow} AND #{endRow}
  </select>
 
   
  <!-- 리조트 리뷰 수정시 조회 -->
  <select id="updateSelect" parameterType="int" resultMap="reviewResultMap">
  	select review_id, uuid, created_at, rating, resort_comment, review_img 
  	from resort_reviews 
  	where review_id=#{reviewId}
  </select>
  
  <!-- 리조트 리뷰 수정 -->
  <update id="update" parameterType="reviews.dto.ResortReviewsDTO">
  	update resort_reviews set rating=#{rating}, resort_comment=#{resortComment}, review_img=#{reviewImg} where review_id = #{reviewId}
  </update>
  
  <!-- 리조트 리뷰 삭제 -->
  <delete id="delete" parameterType="int">
  	delete from resort_reviews where review_id=#{reviewId}
  </delete>
</mapper>