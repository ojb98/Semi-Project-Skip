<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="rental.mapper.RentalShopReviewMapper">
    <select id="countReviewsByRentalShopID" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM rentalshop_reviews
        WHERE rentalshop_id = #{rentalshop_id}
    </select>

    <select id="selectAvgRatingByRentalShopID" parameterType="int" resultType="float">
        select avg(rating)
        from rentalshop_reviews
        where rentalshop_id = #{rentalshop_id}
    </select>

    <select id="selectReviewByRentalShopID" parameterType="int" resultType="rental.dto.RentalShopReviewDTO">
        select u.name, r.rating, r.comments, r.review_img, r.created_at
        from rentalshop_reviews r left join users u
        on r.uuid = u.uuid
        where r.rentalshop_id = #{rentalshop_id}
    </select>
    
    <!-- 렌탈샵 리뷰 insert -->
  <insert id="insert" parameterType="rental.dto.RentalShopReviewDTO">
    insert into rentalshop_reviews values(rentalshop_review_seq.nextval,#{payment_id},#{uuid},#{rentalshop_id},#{rating},#{review_comment},#{review_img, jdbcType=VARCHAR},sysdate)
  </insert>
  
  <!-- 렌탈샵 별 리뷰 글 전체 갯수 -->
  <select id="getCount" parameterType="int"  resultType="int">
  	select nvl(count(review_id),0) cnt from rentalshop_reviews where rentalshop_id = #{rentalshop_id}
  </select>
  
  <!-- 렌탈샵 별 리뷰 기본 리스트 -->
  <select id="reviewList" parameterType="int" resultType="rental.dto.RentalShopReviewDTO">
  	select r.review_id, r.uuid, rpad(substr(u.user_id,1,4),length(u.user_id),'*') as user_id, r.created_at, r.rating, r.review_comment, r.review_img
  	from rentalshop_reviews r left join users u
  	on r.uuid = u.uuid
  	where rentalshop_id = #{rentalshop_id}
  	order by rentalshop_id desc
  </select>   
  
  <!-- 렌탈샵 별 리뷰 리스트 (정렬 및 페이징) -->
  <select id="reviewArray" parameterType="map" resultType="rental.dto.RentalShopReviewDTO">
	SELECT r.review_id, r.uuid, rpad(substr(u.user_id,1,4),length(u.user_id),'*') as user_id, r.created_at, r.rating, r.review_comment, r.review_img 
  	FROM (
		select row_number() over(
			order by
			<choose>
				<when test="sortType == 'ratingDesc'">rating DESC</when>
				<when test="sortType == 'ratingAsc'">rating ASC</when>
				<otherwise>review_id DESC</otherwise>
			</choose>
			) AS rn, 
			review_id, uuid, created_at, rating, review_comment, review_img
		from rentalshop_reviews where rentalshop_id = #{rentalshop_id}
	) r
	join users u on r.uuid = u.uuid
	where rn between #{startRow} and #{endRow}
  </select>
 
   
  <!-- 렌탈샵 리뷰 수정시 조회 -->
  <select id="updateSelect" parameterType="int" resultType="rental.dto.RentalShopReviewDTO">
  	select r.review_id, r.payment_id, r.uuid, u.user_id, r.rentalshop_id, r.rating, r.review_comment, r.review_img, r.created_at 
  	from rentalshop_reviews r left join users u
  	on r.uuid = u.uuid 
  	where review_id=#{review_id}
  </select>
  
  <!-- 렌탈샵 리뷰 수정 -->
  <update id="update" parameterType="rental.dto.RentalShopReviewDTO">
  	update rentalshop_reviews set rating=#{rating}, review_comment=#{review_comment}, review_img=#{review_img} where review_id = #{review_id}
  </update>
  
  <!-- 렌탈샵 리뷰 삭제 -->
  <delete id="delete" parameterType="int">
  	delete from rentalshop_reviews where review_id=#{review_id}
  </delete>
  
  <!-- 렌탈샵 아이디 값 받아오기 -->
  <select id="getRentalshopIdByReview" parameterType="int" resultType="rental.dto.RentalShopReviewDTO">
  	select rentalshop_id from rentalshop where uuid = #{uuid}
  </select>
  
</mapper>